A) Installation steps

1) start the project with cli

django-admin.py startproject profiles_project .
python manage.py startapp profiles_api


2) add frameworks and apps on settings.py

'rest_framework',
'rest_framework.authtoken',
'profiles_api',


3) after that open runserver with manage.py

python manage.py runserver 0.0.0.0:8000 and go to 127.0.0.1:8000 domain

B) Create DB Model for django app

1) on profiles_api/models.py we have to create our db model

required modules:

from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin
from django.contrib.auth.models import BaseUserManager


2) we create a custom user model in models.py with decided django frameworks and classes.
after that we added the changes we did on settings.py

AUTH_USER_MODEL = 'profiles_api.UserProfile'

3) Create django migrations

- connect vagrant server with 

"vagrant ssh"

- activate venv and use makemigrations with manage.py

"python manage.py makemigrations profiles_api"

- After that migration will be create, next is running the migration

"python manage.py migrate"

C) Create superuser

1) We have create super user for manangement side, we can create with django cli

"python manage.py createsuperuser"

- After that, it will ask a information about email, name and password(Sb15)

2) Enable django admin

- on profiles-api/admin.py we have to set our model and function before we created.

- and test it.

"python manage.py runserver 0.0.0.0:8000" and go to 127.0.0.1:8000

- on 127.0.0.1:8000/admin section, we can login our superuser and management dashboard

D) Create APIView

1) We create an APIView in profiles_api/views.py

- APIView is a api response interfaces for users, they can get response diffrently according to methods.

2) We have to create endpoints for api urls on profiles_project/urls.py

- For example: 

    urlpatterns = [
        path('admin/', admin.site.urls),
    ]

    is for admins side console url endpoint

- We will create new urls.py in profiles_api, but first we have to include out new urls.py in the main urls.py

    path('api/', include('profiles_api.urls'))

- And than we will create and new path for HelloApiVÄ°ew on /profiles_api/urls.py

    urlpatterns = [
        path('hello-view/', views.HelloApiView.as_view()),
    ]

F) Create Serializer for APIView

1) We create a Serializer for APIView on profiles_api/serializer.py

- We need to add POST method for APIView 

-- We add "status" framework for http methods status information on views.py
so if post method will send it will return the status of method

-- We add post method with serializer class and we check if its success or not
if its success it will return a message, else it will return bad request(HTTP 400).

2) Now we can post a name parameter as we want and return success and error code.

3) We need to add PUT, PATCH and DELETE methods also.

-- Now we can use all methods with our methods in profiles_api/views.py

G) ViewSets

1) Processes list for api like create, update, list, etc....

- We can use a simple CRUD interface for db.

- Quick simple api model.

- working with standart data structures.

- etc...

2) We create a viewset in profiles_api/views.py

- from rest_framework import viewsets

- Viewsets can use for support views endpoints

3) We need to register our viewset on /profiles_api/urls.py

- Than we can reach our viewset on home path of api/

4) Than we can create other functions like add, create, update, retrieve, partial_update...

- But as the api_views steps we need a serializer but we can use same serializer.

- pk is primary key


H) Purpose of Profiles API

- Create a new profile

-- Handle registeration
-- Validate profile data

- Listing existing profiles

-- Search for profile
-- Email and name

- View spesific profiles

-- Profile ID

- Update profile or logged in user

-- Change name, email, password

- Delete Profile

1) API Urls

- /api/profile/

-- List all profiles when HTTP 'GET' method called.
-- Create a new profile  when HTTP 'POST' method called.

- /api/profile/<profile_id>

-- View spesific profile details by using HTTP 'GET'
-- Update object when using HTTP 'PUT or PATCH'
-- Remove object when using HTTP 'DELETE

2) We will create serializer for user profile creating process,

- We will connect with /profiles_api/models.py UserProfile class and create a serializer for users

- Now we can create a ViewSet for profiles and connect this viewset with url endpoint

- We dont need any base_name query set settings because we create a queryset in profiles_api/views.py --> UserProfileViewSet
so we dont set any base_name for url router.

router = DefaultRouter()
router.register('hello-viewset', views.HelloViewset, base_name='hello-viewset')
router.register('profile', views.UserProfileViewSet)

3) Now we need to create a permission class for rules of api usage.

- User cant be anonym and cant change anything without permission, so we need to create process permission rule with permission class.

- We set a update rule in profiles_api/permissions.py

4) Now we need token auth for users.

- In views.py we need to add auth framework and profiles_api/permissions.py in views.py

from rest_framework.authentication import TokenAuthentication
from profiles_api import permissions

I) Will add a search feature for profiles on profiles_api/views.py

- Now we can filter and search by name and email.

J) Will add login functionality on profiles_api/views.py

1) We need to add settings and authentication token module

from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.settings import api_settings

- After call the token class and create a view for UserLoginApiView, we have to add new url path
on profiles_api/urls.py

- And we can test our token with modheader chrome extension.

- With token we can make any updated on the api. So with this way we provide the security for each user.


K) Basic requirements.

Creating new feed items for authenticated user.

- logged user only

Updating feed items.

- logged user only.

Deleting feed items.

- logged user only.

Viewing other profile status updates.

- all users

1) API URLs.

- /api/feed/

-- list all feed items

-- GET(List feed items)

-- POST(Create feed item for logged in user)

- /api/feed/<feed_item_id>

-- manage specific feed items.

-- GET(get the feed item)

-- PUT/PATCH(update feed item)

-- DELETE(delete feed item

2) We starts with creating a new model item and we have to import settings for retrieve settings for profiles_project/settings.py

from django.conf import Settings

3) We create a ProfileFeedItem model for user system process, auth and informations(time, log)

- After that we have to migrate our new model.

python manage.py makemigrations

- After create migration file we need to migrate our changes on db.

python manage.py migrate

4) Add profile feed model to profiles_api/admin.py.

admin.site.register(models.ProfileFeedItem)

5) Create a serializer for profiles feed.

6) After create a serializer for profilesfeeditems we need create a viewset

7) And then we have to add new url path for viewset on profiles_api/urls.py

router.register('feed', views.UserProfileFeedViewSet)

8) Last modification for profiles_api is permission for feed API

- We will add a new permission rules on profiles_api/permissions.py and we have to pass the permission function on
UserProfileFeedViewSet as a parameter with rest_framework's other module.

from rest_framework.permissions import IsAuthenticatedOrReadOnly

9) We can use just for permissions

from rest_framework.permissions import IsAuthenticated
A) Installation steps

1) start the project with cli

django-admin.py startproject profiles_project .
python manage.py startapp profiles_api


2) add frameworks and apps on settings.py

'rest_framework',
'rest_framework.authtoken',
'profiles_api',


3) after that open runserver with manage.py

python manage.py runserver 0.0.0.0:8000 and go to 127.0.0.1:8000 domain

B) Create DB Model for django app

1) on profiles_api/models.py we have to create our db model

required modules:

from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin
from django.contrib.auth.models import BaseUserManager


2) we create a custom user model in models.py with decided django frameworks and classes.
after that we added the changes we did on settings.py

AUTH_USER_MODEL = 'profiles_api.UserProfile'

3) Create django migrations

- connect vagrant server with 

"vagrant ssh"

- activate venv and use makemigrations with manage.py

"python manage.py makemigrations profiles_api"

- After that migration will be create, next is running the migration

"python manage.py migrate"

C) Create superuser

1) We have create super user for manangement side, we can create with django cli

"python manage.py createsuperuser"

- After that, it will ask a information about email, name and password(Sb15)

2) Enable django admin

- on profiles-api/admin.py we have to set our model and function before we created.

- and test it.

"python manage.py runserver 0.0.0.0:8000" and go to 127.0.0.1:8000

- on 127.0.0.1:8000/admin section, we can login our superuser and management dashboard

D) Create APIView

1) We create an APIView in profiles_api/views.py

- APIView is a api response interfaces for users, they can get response diffrently according to methods.

2) We have to create endpoints for api urls on profiles_project/urls.py

- For example: 

    urlpatterns = [
        path('admin/', admin.site.urls),
    ]

    is for admins side console url endpoint

- We will create new urls.py in profiles_api, but first we have to include out new urls.py in the main urls.py

    path('api/', include('profiles_api.urls'))

- And than we will create and new path for HelloApiVÄ°ew on /profiles_api/urls.py

    urlpatterns = [
        path('hello-view/', views.HelloApiView.as_view()),
    ]

F) Create Serializer for APIView

1) We create a Serializer for APIView on profiles_api/serializer.py

- We need to add POST method for APIView 

-- We add "status" framework for http methods status information on views.py
so if post method will send it will return the status of method

-- We add post method with serializer class and we check if its success or not
if its success it will return a message, else it will return bad request(HTTP 400).

2) Now we can post a name parameter as we want and return success and error code.

3) We need to add PUT, PATCH and DELETE methods also.

-- Now we can use all methods with our methods in profiles_api/views.py

G) ViewSets

1) Processes list for api like create, update, list, etc....

- We can use a simple CRUD interface for db.

- Quick simple api model.

- working with standart data structures.

- etc...

2) We create a viewset in profiles_api/views.py

- from rest_framework import viewsets

- Viewsets can use for support views endpoints

3) We need to register our viewset on /profiles_api/urls.py

- Than we can reach our viewset on home path of api/

4) Than we can create other functions like add, create, update, retrieve, partial_update...

- But as the api_views steps we need a serializer but we can use same serializer.

- pk is primary key